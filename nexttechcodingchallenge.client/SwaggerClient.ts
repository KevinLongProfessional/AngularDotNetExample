//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* eslint-disable */
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

@Injectable()
export class Client {
  private http: HttpClient;
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

  constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
    this.http = http;
    this.baseUrl = baseUrl ?? "";
  }

  /**
   * @param itemCount (optional) 
   * @param startIndex (optional) 
   * @return OK
   */
  getNews(itemCount: number | undefined, startIndex: number | undefined): Observable<HackerNewsItem[]> {
    let url_ = this.baseUrl + "/News/GetNews?";
    if (itemCount === null)
      throw new globalThis.Error("The parameter 'itemCount' cannot be null.");
    else if (itemCount !== undefined)
      url_ += "itemCount=" + encodeURIComponent("" + itemCount) + "&";
    if (startIndex === null)
      throw new globalThis.Error("The parameter 'startIndex' cannot be null.");
    else if (startIndex !== undefined)
      url_ += "startIndex=" + encodeURIComponent("" + startIndex) + "&";
    url_ = url_.replace(/[?&]$/, "");

    let options_: any = {
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Accept": "application/json"
      })
    };

    return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_: any) => {
      return this.processGetNews(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processGetNews(response_ as any);
        } catch (e) {
          return _observableThrow(e) as any as Observable<HackerNewsItem[]>;
        }
      } else
        return _observableThrow(response_) as any as Observable<HackerNewsItem[]>;
    }));
  }

  protected processGetNews(response: HttpResponseBase): Observable<HackerNewsItem[]> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (response as any).error instanceof Blob ? (response as any).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); } }
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        if (Array.isArray(resultData200)) {
          result200 = [] as any;
          for (let item of resultData200)
            result200!.push(HackerNewsItem.fromJS(item));
        }
        else {
          result200 = null as any;
        }
        return _observableOf(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf(null as any);
  }

  /**
   * @param itemCount (optional) 
   * @param startIndex (optional) 
   * @param searchText (optional) 
   * @return OK
   */
  searchNews(itemCount: number | undefined, startIndex: number | undefined, searchText: string | undefined): Observable<HackerNewsItem[]> {
    let url_ = this.baseUrl + "/News/SearchNews?";
    if (itemCount === null)
      throw new globalThis.Error("The parameter 'itemCount' cannot be null.");
    else if (itemCount !== undefined)
      url_ += "itemCount=" + encodeURIComponent("" + itemCount) + "&";
    if (startIndex === null)
      throw new globalThis.Error("The parameter 'startIndex' cannot be null.");
    else if (startIndex !== undefined)
      url_ += "startIndex=" + encodeURIComponent("" + startIndex) + "&";
    if (searchText === null)
      throw new globalThis.Error("The parameter 'searchText' cannot be null.");
    else if (searchText !== undefined)
      url_ += "searchText=" + encodeURIComponent("" + searchText) + "&";
    url_ = url_.replace(/[?&]$/, "");

    let options_: any = {
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Accept": "application/json"
      })
    };

    return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_: any) => {
      return this.processSearchNews(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processSearchNews(response_ as any);
        } catch (e) {
          return _observableThrow(e) as any as Observable<HackerNewsItem[]>;
        }
      } else
        return _observableThrow(response_) as any as Observable<HackerNewsItem[]>;
    }));
  }

  protected processSearchNews(response: HttpResponseBase): Observable<HackerNewsItem[]> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (response as any).error instanceof Blob ? (response as any).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); } }
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        if (Array.isArray(resultData200)) {
          result200 = [] as any;
          for (let item of resultData200)
            result200!.push(HackerNewsItem.fromJS(item));
        }
        else {
          result200 = null as any;
        }
        return _observableOf(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf(null as any);
  }
}

export class HackerNewsItem implements IHackerNewsItem {
  id?: number;
  deleted?: boolean;
  type?: string | undefined;
  by?: string | undefined;
  time?: number;
  text?: string | undefined;
  title?: string | undefined;
  dead?: boolean;
  parent?: number | undefined;
  kids?: number[] | undefined;
  url?: string | undefined;

  constructor(data?: IHackerNewsItem) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (this as any)[property] = (data as any)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.id = _data["id"];
      this.deleted = _data["deleted"];
      this.type = _data["type"];
      this.by = _data["by"];
      this.time = _data["time"];
      this.text = _data["text"];
      this.title = _data["title"];
      this.dead = _data["dead"];
      this.parent = _data["parent"];
      if (Array.isArray(_data["kids"])) {
        this.kids = [] as any;
        for (let item of _data["kids"])
          this.kids!.push(item);
      }
      this.url = _data["url"];
    }
  }

  static fromJS(data: any): HackerNewsItem {
    data = typeof data === 'object' ? data : {};
    let result = new HackerNewsItem();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["id"] = this.id;
    data["deleted"] = this.deleted;
    data["type"] = this.type;
    data["by"] = this.by;
    data["time"] = this.time;
    data["text"] = this.text;
    data["title"] = this.title;
    data["dead"] = this.dead;
    data["parent"] = this.parent;
    if (Array.isArray(this.kids)) {
      data["kids"] = [];
      for (let item of this.kids)
        data["kids"].push(item);
    }
    data["url"] = this.url;
    return data;
  }
}

export interface IHackerNewsItem {
  id?: number;
  deleted?: boolean;
  type?: string | undefined;
  by?: string | undefined;
  time?: number;
  text?: string | undefined;
  title?: string | undefined;
  dead?: boolean;
  parent?: number | undefined;
  kids?: number[] | undefined;
  url?: string | undefined;
}

export class ApiException extends Error {
  override message: string;
  status: number;
  response: string;
  headers: { [key: string]: any; };
  result: any;

  constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
    super();

    this.message = message;
    this.status = status;
    this.response = response;
    this.headers = headers;
    this.result = result;
  }

  protected isApiException = true;

  static isApiException(obj: any): obj is ApiException {
    return obj.isApiException === true;
  }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
  if (result !== null && result !== undefined)
    return _observableThrow(result);
  else
    return _observableThrow(new ApiException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
  return new Observable<string>((observer: any) => {
    if (!blob) {
      observer.next("");
      observer.complete();
    } else {
      let reader = new FileReader();
      reader.onload = event => {
        observer.next((event.target as any).result);
        observer.complete();
      };
      reader.readAsText(blob);
    }
  });
}
